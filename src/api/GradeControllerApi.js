/*
 * Grade Calc
 * Grade Calculator App
 *
 * OpenAPI spec version: 0.0.1
 * Contact: eli.burch@burchbytes.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.36
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {GradeResponse} from '../model/GradeResponse';

/**
* GradeController service.
* @module api/GradeControllerApi
* @version 0.0.1
*/
export class GradeControllerApi {

    /**
    * Constructs a new GradeControllerApi. 
    * @alias module:api/GradeControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the computeGrade operation.
     * @callback moduleapi/GradeControllerApi~computeGradeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GradeResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} className 
     * @param {module:api/GradeControllerApi~computeGradeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    computeGrade(className, callback) {
      
      let postBody = null;
      // verify the required parameter 'className' is set
      if (className === undefined || className === null) {
        throw new Error("Missing the required parameter 'className' when calling computeGrade");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'className': className
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/hal+json'];
      let returnType = GradeResponse;

      return this.apiClient.callApi(
        '/api/grade', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the computeMaxGrade operation.
     * @callback moduleapi/GradeControllerApi~computeMaxGradeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GradeResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} className 
     * @param {module:api/GradeControllerApi~computeMaxGradeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    computeMaxGrade(className, callback) {
      
      let postBody = null;
      // verify the required parameter 'className' is set
      if (className === undefined || className === null) {
        throw new Error("Missing the required parameter 'className' when calling computeMaxGrade");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'className': className
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/hal+json'];
      let returnType = GradeResponse;

      return this.apiClient.callApi(
        '/api/grade/max', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the computeRequiredGrade operation.
     * @callback moduleapi/GradeControllerApi~computeRequiredGradeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GradeResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} className 
     * @param {Number} targetGrade 
     * @param {module:api/GradeControllerApi~computeRequiredGradeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    computeRequiredGrade(className, targetGrade, callback) {
      
      let postBody = null;
      // verify the required parameter 'className' is set
      if (className === undefined || className === null) {
        throw new Error("Missing the required parameter 'className' when calling computeRequiredGrade");
      }
      // verify the required parameter 'targetGrade' is set
      if (targetGrade === undefined || targetGrade === null) {
        throw new Error("Missing the required parameter 'targetGrade' when calling computeRequiredGrade");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'className': className,'targetGrade': targetGrade
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/hal+json'];
      let returnType = GradeResponse;

      return this.apiClient.callApi(
        '/api/grade/required', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}